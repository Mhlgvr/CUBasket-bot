import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
# from aiogram.utils import executor
# from aiogram.contrib.middlewares.logging import LoggingMiddleware
from config import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
# dp.middleware.setup(LoggingMiddleware())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("teams.db")
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS participants (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    full_name TEXT,
                    stream TEXT
                )''')
conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–∏—è
participation_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
participation_keyboard.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ç–æ–∫–∞
streams = ["–í–æ—Å—Ç–æ–∫", "–ó–∞–ø–∞–¥", "–°–µ–≤–µ—Ä", "–Æ–≥", "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"]
stream_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
for stream in streams:
    stream_keyboard.add(KeyboardButton(stream))

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞! üèÄ")
    await message.answer("–≠—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä —Å–æ–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ —É—Ä–æ–≤–Ω—è–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ?", reply_markup=participation_keyboard)

@dp.message_handler(lambda message: message.text.lower() == "–¥–∞")
async def ask_full_name(message: types.Message):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

@dp.message_handler(lambda message: message.text.lower() == "–Ω–µ—Ç")
async def decline_participation(message: types.Message):
    await message.answer("–•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start.")

@dp.message_handler(lambda message: len(message.text.split()) >= 2)
async def ask_stream(message: types.Message):
    user_id = message.from_user.id
    full_name = message.text
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ—Ç–æ–∫:", reply_markup=stream_keyboard)
    dp.register_message_handler(lambda msg: save_participant(msg, user_id, full_name), content_types=types.ContentTypes.TEXT)

async def save_participant(message: types.Message, user_id, full_name):
    if message.text not in streams:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return
    
    stream = message.text
    cursor.execute("INSERT INTO participants (user_id, full_name, stream) VALUES (?, ?, ?)", (user_id, full_name, stream))
    conn.commit()
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–º–∞–Ω–¥–µ {stream}! üèÄ")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    dp.start_polling(dp, skip_updates=True)